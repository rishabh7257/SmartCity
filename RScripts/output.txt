
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> pkgTest <- function(x)
+ {
+   if (!require(x,character.only = TRUE))
+   {
+     install.packages(x,dep=TRUE)
+     if(!require(x,character.only = TRUE)) stop("Package not found")
+   }
+ }
> 
> pkgTest("e1071")
Loading required package: e1071
> wd <- getwd()
> location <- "/final.csv"
> 
> final <- read.csv(paste(wd,location, sep= ""))
> train<-final[1:1080,]
> test<-final[1081:1350,]
> library('e1071')
> #my.model <- svm(power_outage ~ ., 
> #                  data=train,
> #                  probability=TRUE)
> 
> #summary(my.model)
> #svm.pred <- predict(my.model, test[,-1])
> #svmt=table(pred = svm.pred, true = test[, 1])
> #svmt
> train$power_outage=as.factor(train$power_outage)
> #print(train)
> nf<-ncol(train)
> strfunc<-paste(names(train)[nf],"~.",sep="") # we assume the label to be in the last column
> func<- as.formula(strfunc) 
> print(func)
power_outage ~ .
> my.model<-svm(func,data=train,probability=TRUE)
> 
> print(my.model)

Call:
svm(formula = func, data = train, probability = TRUE)


Parameters:
   SVM-Type:  C-classification 
 SVM-Kernel:  radial 
       cost:  1 
      gamma:  0.06666667 

Number of Support Vectors:  148

> 
> #my.model<-svm(train[nf]~.,data=train,probability=TRUE)
> predsvm<-attr(predict(my.model,test[,-nf],probability = TRUE),'probabilities')[,'1']  
> print(predsvm)
        1081         1082         1083         1084         1085         1086 
5.612540e-03 3.609322e-03 3.558465e-06 1.038331e-05 6.070184e-02 1.663086e-05 
        1087         1088         1089         1090         1091         1092 
3.207707e-03 4.233590e-03 1.038423e-02 3.588424e-03 2.587532e-03 4.368031e-03 
        1093         1094         1095         1096         1097         1098 
4.018234e-03 4.047557e-03 3.993140e-03 1.465665e-05 3.407201e-03 4.525799e-07 
        1099         1100         1101         1102         1103         1104 
1.082571e-06 1.908562e-06 1.344981e-05 1.855679e-05 1.101415e-02 1.010035e-02 
        1105         1106         1107         1108         1109         1110 
9.613614e-02 1.023192e-02 3.643545e-02 1.278734e-02 9.029296e-06 1.544055e-02 
        1111         1112         1113         1114         1115         1116 
7.776094e-03 6.297593e-03 1.109130e-05 2.017223e-06 1.967884e-06 2.087491e-06 
        1117         1118         1119         1120         1121         1122 
3.115960e-02 3.267733e-08 2.610792e-07 3.187756e-07 4.846009e-07 3.058299e-06 
        1123         1124         1125         1126         1127         1128 
5.801058e-03 2.597106e-06 2.444131e-06 1.587826e-02 1.577172e-02 2.746422e-02 
        1129         1130         1131         1132         1133         1134 
1.350937e-02 8.970350e-01 1.584022e-02 2.959117e-06 1.406604e-07 2.597623e-02 
        1135         1136         1137         1138         1139         1140 
8.205110e-06 9.056541e-06 3.613604e-02 9.176570e-03 7.132127e-06 1.561284e-06 
        1141         1142         1143         1144         1145         1146 
2.641251e-03 5.908629e-03 4.801146e-08 3.428490e-07 8.848427e-03 4.387353e-07 
        1147         1148         1149         1150         1151         1152 
2.563504e-06 4.442438e-08 1.038698e-06 2.649448e-07 8.792843e-01 5.079344e-06 
        1153         1154         1155         1156         1157         1158 
3.357678e-03 2.910766e-03 1.141599e-02 2.144272e-06 4.812436e-03 6.015442e-07 
        1159         1160         1161         1162         1163         1164 
6.312250e-06 2.244139e-08 2.316663e-08 1.150062e-07 1.675399e-06 5.644051e-03 
        1165         1166         1167         1168         1169         1170 
3.983567e-07 2.861473e-06 4.771557e-06 1.451328e-06 6.407325e-07 1.252966e-05 
        1171         1172         1173         1174         1175         1176 
1.027516e-02 1.487689e-05 1.805406e-06 2.675227e-07 3.864525e-06 1.760741e-07 
        1177         1178         1179         1180         1181         1182 
8.825779e-08 3.377222e-06 1.713707e-05 1.059179e-07 3.220063e-02 1.726966e-05 
        1183         1184         1185         1186         1187         1188 
5.000046e-07 1.163172e-02 1.606448e-05 6.889758e-07 1.072502e-06 4.650467e-06 
        1189         1190         1191         1192         1193         1194 
3.188082e-07 1.073237e-06 7.273709e-08 2.558326e-03 1.247367e-05 3.611963e-02 
        1195         1196         1197         1198         1199         1200 
1.808363e-02 1.543430e-02 2.237924e-02 1.627538e-06 5.506771e-06 6.865231e-08 
        1201         1202         1203         1204         1205         1206 
1.406941e-05 1.142729e-02 1.083574e-02 1.188096e-05 6.205945e-01 3.496401e-03 
        1207         1208         1209         1210         1211         1212 
6.373999e-03 4.745618e-02 1.310895e-02 1.395733e-02 2.043649e-02 1.593087e-02 
        1213         1214         1215         1216         1217         1218 
4.784579e-02 6.080282e-02 3.023245e-02 8.854391e-03 5.215251e-02 5.787654e-02 
        1219         1220         1221         1222         1223         1224 
3.854820e-02 6.192010e-02 4.265143e-03 1.113291e-02 1.532739e-02 1.715471e-02 
        1225         1226         1227         1228         1229         1230 
4.047819e-03 1.065012e-05 4.531836e-06 1.651557e-02 4.619205e-06 6.685686e-06 
        1231         1232         1233         1234         1235         1236 
7.626522e-06 5.594477e-07 3.813740e-08 1.803566e-07 4.811949e-08 8.048412e-08 
        1237         1238         1239         1240         1241         1242 
1.150605e-02 1.122816e-06 3.803490e-06 3.563298e-03 9.315435e-01 3.792257e-07 
        1243         1244         1245         1246         1247         1248 
6.433568e-07 6.301478e-03 1.140474e-05 5.678826e-08 6.870397e-03 4.457700e-03 
        1249         1250         1251         1252         1253         1254 
2.108903e-02 9.819852e-06 3.497901e-03 1.256994e-06 2.751834e-03 1.452139e-06 
        1255         1256         1257         1258         1259         1260 
3.690805e-06 1.286844e-06 6.071055e-06 1.794048e-02 3.009142e-03 1.320759e-05 
        1261         1262         1263         1264         1265         1266 
9.342953e-03 3.733080e-03 1.412447e-05 5.739548e-06 7.287205e-01 4.592936e-07 
        1267         1268         1269         1270         1271         1272 
1.190395e-06 7.145136e-03 7.137363e-03 6.035814e-06 3.096470e-06 1.883707e-05 
        1273         1274         1275         1276         1277         1278 
2.542226e-06 2.829323e-02 3.063865e-06 3.495774e-06 3.484998e-03 4.302593e-06 
        1279         1280         1281         1282         1283         1284 
3.812339e-06 4.089521e-03 3.895779e-03 7.899197e-01 6.150843e-01 1.633127e-05 
        1285         1286         1287         1288         1289         1290 
8.800805e-07 3.816118e-06 4.706194e-06 5.763538e-07 9.472972e-07 5.265650e-07 
        1291         1292         1293         1294         1295         1296 
1.749479e-06 4.467291e-03 1.079427e-02 9.650043e-06 4.066894e-03 4.248177e-03 
        1297         1298         1299         1300         1301         1302 
6.159148e-06 1.306290e-08 4.011310e-03 2.399660e-07 3.181209e-07 5.351838e-07 
        1303         1304         1305         1306         1307         1308 
6.513627e-02 8.776391e-02 1.013768e-01 9.122402e-02 9.626428e-02 1.004783e-01 
        1309         1310         1311         1312         1313         1314 
8.476100e-02 7.935210e-02 7.557108e-02 1.030442e-01 1.213500e-01 1.260719e-01 
        1315         1316         1317         1318         1319         1320 
1.223358e-01 8.309942e-02 1.718870e-01 9.178162e-02 1.080825e-01 1.221166e-01 
        1321         1322         1323         1324         1325         1326 
7.837347e-02 6.948137e-02 8.485541e-02 7.138905e-02 4.563349e-02 4.161565e-02 
        1327         1328         1329         1330         1331         1332 
6.765902e-03 1.619674e-05 6.890152e-03 1.153824e-05 6.968003e-03 1.278848e-02 
        1333         1334         1335         1336         1337         1338 
2.546685e-03 1.117590e-05 3.014415e-03 7.754543e-02 2.518084e-02 2.824550e-02 
        1339         1340         1341         1342         1343         1344 
2.386877e-02 5.196013e-02 2.405223e-02 9.162239e-02 4.058788e-02 7.729800e-02 
        1345         1346         1347         1348         1349         1350 
1.018321e-01 9.729670e-02 1.033725e-01 1.090414e-01 9.388197e-02 7.961834e-02 
> myframe<-cbind(predsvm,test[,nf])
> myframe<-as.data.frame(myframe)
> 
> 
> 
> cutoff <- 0.5
> #Check the threshold
> for(i in 1:nrow(myframe))
+ {
+   if(myframe[i,1]>=cutoff)
+   {
+     myframe[i,1]<-1
+   }
+   else
+   {
+     myframe[i,1]<-0
+   }
+ }
> 
> print(myframe)
     predsvm V2
1081       0  0
1082       0  0
1083       0  0
1084       0  0
1085       0  0
1086       0  0
1087       0  0
1088       0  0
1089       0  0
1090       0  0
1091       0  0
1092       0  0
1093       0  0
1094       0  0
1095       0  0
1096       0  0
1097       0  0
1098       0  0
1099       0  0
1100       0  0
1101       0  0
1102       0  0
1103       0  0
1104       0  0
1105       0  0
1106       0  0
1107       0  0
1108       0  0
1109       0  0
1110       0  0
1111       0  0
1112       0  0
1113       0  0
1114       0  0
1115       0  0
1116       0  0
1117       0  0
1118       0  0
1119       0  0
1120       0  0
1121       0  0
1122       0  0
1123       0  0
1124       0  0
1125       0  0
1126       0  0
1127       0  0
1128       0  0
1129       0  0
1130       1  1
1131       0  0
1132       0  0
1133       0  0
1134       0  0
1135       0  0
1136       0  0
1137       0  0
1138       0  0
1139       0  0
1140       0  0
1141       0  0
1142       0  0
1143       0  0
1144       0  0
1145       0  0
1146       0  0
1147       0  0
1148       0  0
1149       0  0
1150       0  0
1151       1  1
1152       0  0
1153       0  0
1154       0  0
1155       0  0
1156       0  0
1157       0  0
1158       0  0
1159       0  0
1160       0  0
1161       0  0
1162       0  0
1163       0  0
1164       0  0
1165       0  0
1166       0  0
1167       0  0
1168       0  0
1169       0  0
1170       0  0
1171       0  0
1172       0  0
1173       0  0
1174       0  0
1175       0  0
1176       0  0
1177       0  0
1178       0  0
1179       0  0
1180       0  0
1181       0  0
1182       0  0
1183       0  0
1184       0  0
1185       0  0
1186       0  0
1187       0  0
1188       0  0
1189       0  0
1190       0  0
1191       0  0
1192       0  0
1193       0  0
1194       0  0
1195       0  0
1196       0  0
1197       0  0
1198       0  0
1199       0  0
1200       0  0
1201       0  0
1202       0  0
1203       0  0
1204       0  0
1205       1  1
1206       0  0
1207       0  0
1208       0  0
1209       0  0
1210       0  0
1211       0  0
1212       0  0
1213       0  0
1214       0  0
1215       0  0
1216       0  0
1217       0  0
1218       0  0
1219       0  0
1220       0  0
1221       0  0
1222       0  0
1223       0  0
1224       0  0
1225       0  0
1226       0  0
1227       0  0
1228       0  0
1229       0  0
1230       0  0
1231       0  0
1232       0  0
1233       0  0
1234       0  0
1235       0  0
1236       0  0
1237       0  0
1238       0  0
1239       0  0
1240       0  0
1241       1  1
1242       0  0
1243       0  0
1244       0  0
1245       0  0
1246       0  0
1247       0  0
1248       0  0
1249       0  0
1250       0  0
1251       0  0
1252       0  0
1253       0  0
1254       0  0
1255       0  0
1256       0  0
1257       0  0
1258       0  0
1259       0  0
1260       0  0
1261       0  0
1262       0  0
1263       0  0
1264       0  0
1265       1  1
1266       0  0
1267       0  1
1268       0  1
1269       0  1
1270       0  1
1271       0  1
1272       0  1
1273       0  1
1274       0  1
1275       0  1
1276       0  1
1277       0  1
1278       0  1
1279       0  1
1280       0  1
1281       0  1
1282       1  1
1283       1  1
1284       0  0
1285       0  0
1286       0  0
1287       0  0
1288       0  0
1289       0  0
1290       0  0
1291       0  0
1292       0  0
1293       0  0
1294       0  0
1295       0  0
1296       0  0
1297       0  0
1298       0  0
1299       0  0
1300       0  0
1301       0  0
1302       0  0
1303       0  0
1304       0  0
1305       0  0
1306       0  0
1307       0  0
1308       0  0
1309       0  0
1310       0  0
1311       0  0
1312       0  0
1313       0  0
1314       0  0
1315       0  0
1316       0  0
1317       0  0
1318       0  0
1319       0  0
1320       0  0
1321       0  0
1322       0  0
1323       0  0
1324       0  0
1325       0  0
1326       0  0
1327       0  0
1328       0  0
1329       0  0
1330       0  0
1331       0  0
1332       0  0
1333       0  0
1334       0  0
1335       0  0
1336       0  0
1337       0  0
1338       0  0
1339       0  0
1340       0  0
1341       0  0
1342       0  1
1343       0  0
1344       0  0
1345       0  1
1346       0  0
1347       0  0
1348       0  0
1349       0  0
1350       0  0
> 
> proc.time()
   user  system elapsed 
  0.324   0.033   0.345 
