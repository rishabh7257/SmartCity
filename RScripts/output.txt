
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> pkgTest <- function(x)
+  {
+        if (!require(x,character.only = TRUE))
+        {
+            install.packages(x, repos="http://cran.cnr.berkeley.edu")
+              if(!require(x,character.only = TRUE)) stop("Package not found")
+            }
+      }
> pkgTest("randomForest")
Loading required package: randomForest
randomForest 4.6-12
Type rfNews() to see new features/changes/bug fixes.
> library(randomForest)
> 
> wd <- getwd()
> location <- "/RScripts/final.csv"
> testLocation <- "/RScripts/test.csv"
> #Read the data 
> 
> final <- read.csv(paste(wd,location, sep= ""))
> testresult<-read.csv(paste(wd,testLocation, sep= ""))
> 
> #I have to give final as training data and testresult as test data.
> #Is below the correct way of doing it
> fit <- randomForest(power_outage ~ .,final,ntree=500)
Warning message:
In randomForest.default(m, y, ...) :
  The response has five or fewer unique values.  Are you sure you want to do regression?
> nf<-ncol(final)
> nrow(testresult)
[1] 7
> myResultFrame <- predict(fit,testresult[,-nf])
> #predicted 
> myResultFrame <- data.frame(myResultFrame)
> #View(myResultFrame)
> myPredictedFrame<-as.data.frame(myResultFrame)
> 
> #I get results but not with good accuracy.
> #so does it use the trained model or is using simple random forest?
> 
> 
> cutofflowone <- 0.0025
> cutofflowtwo <- 0.0050
> cutofflowthree <- 0.0075
> cutofflowfour <- 0.01
> cutofflowfive <- 0.0150
> cutoffmod <- 0.2
> cutoffmid <- 0.4
> cutoffhigh <- 0.6
> 
> #Check the threshold
> for(i in 1:nrow(myPredictedFrame))
+ {
+   if(myPredictedFrame[i,1]<=cutofflowone)
+   {
+     myPredictedFrame[i,1]<-0.10
+   }
+   else if((myPredictedFrame[i,1]>=cutofflowone) && (myPredictedFrame[i,1]<cutofflowtwo))
+   {
+     myPredictedFrame[i,1]<-0.15
+   }
+   else if((myPredictedFrame[i,1]>=cutofflowtwo) && (myPredictedFrame[i,1]<cutofflowthree))
+   {
+     myPredictedFrame[i,1]<-0.20
+   }
+   else if((myPredictedFrame[i,1]>=cutofflowthree) && (myPredictedFrame[i,1]<cutofflowfour))
+   {
+     myPredictedFrame[i,1]<-0.25
+   }
+   else if((myPredictedFrame[i,1]>=cutofflowfour) && (myPredictedFrame[i,1]<cutofflowfive))
+   {    
+     myPredictedFrame[i,1]<-0.30
+   }
+ 
+   else if((myPredictedFrame[i,1]>=cutofflowfive) && (myPredictedFrame[i,1]<cutoffmod))
+   {
+     myPredictedFrame[i,1]<-0.40
+   }
+  
+   else if((myPredictedFrame[i,1]>=cutoffmod) && (myPredictedFrame[i,1]<cutoffmid))
+   {
+     myPredictedFrame[i,1]<-0.70
+   }
+   else if((myPredictedFrame[i,1]>=cutoffmid) && (myPredictedFrame[i,1]<cutoffhigh))
+   {
+     myPredictedFrame[i,1]<-0.80
+   }
+   else
+   {
+     myPredictedFrame[i,1]<-0.95
+   }
+ }
> 
> 
> #View(myPredictedFrame)
> 
> #Writing actual values in the table
> newOutput <-paste(wd,'/RScripts/newOutput.txt', sep= "")
> write.table(myResultFrame, newOutput,sep="\t",append=F,row.names=FALSE, col.names=FALSE)
> 
> #Writing the rounded off values in the table
> newOutputRounded<-paste(wd,'/RScripts/newOutputRounded.txt', sep= "")
> write.table(myPredictedFrame, newOutputRounded, sep="\n",append=F,row.names=FALSE, col.names=FALSE)
> 
> #RandomForestResult <- get_metrics(myResultFrame)
> 
> #RandomForestResult
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  1.806   0.126   2.179 
